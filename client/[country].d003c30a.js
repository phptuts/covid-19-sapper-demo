import { S as SvelteComponent, i as init, s as safe_not_equal, b as element, p as text, c as space, f as claim_element, g as children, q as claim_text, d as detach, h as claim_space, j as attr, a as insert, k as append, u as set_data, n as noop, Q as assign, x as create_component, y as claim_component, z as mount_component, C as transition_in, D as transition_out, E as destroy_component, e as empty, N as query_selector_all, R as get_spread_update, T as get_spread_object, U as check_outros, v as binding_callbacks, w as bind, B as add_flush_callback, V as group_outros, P as goto } from './client.2752e8d9.js';
import { _ } from './cache.49e66cc5.js';
import { c as getDataForCountry, d as getCountryTimeline, e as getProvincesForCountry, C as CovidChart, f as filterByName, F as Filter, T as Table } from './helpers.c41f3057.js';

/* src/components/CovidInfo.svelte generated by Svelte v3.20.1 */

function create_fragment(ctx) {
	let div12;
	let div3;
	let div0;
	let t0;
	let t1_value = /*cases*/ ctx[0].toLocaleString() + "";
	let t1;
	let t2;
	let div1;
	let t3;
	let t4_value = /*todayCases*/ ctx[1].toLocaleString() + "";
	let t4;
	let t5;
	let div2;
	let t6;
	let t7_value = /*casesPerOneMillion*/ ctx[2].toLocaleString() + "";
	let t7;
	let t8;
	let div7;
	let div4;
	let t9;
	let t10_value = /*deaths*/ ctx[6].toLocaleString() + "";
	let t10;
	let t11;
	let div5;
	let t12;
	let t13_value = /*todayDeaths*/ ctx[8].toLocaleString() + "";
	let t13;
	let t14;
	let div6;
	let t15;
	let t16_value = /*deathsPerMillion*/ ctx[3].toLocaleString() + "";
	let t16;
	let t17;
	let div11;
	let div8;
	let t18;
	let t19_value = /*active*/ ctx[5].toLocaleString() + "";
	let t19;
	let t20;
	let div9;
	let t21;
	let t22_value = /*critical*/ ctx[7].toLocaleString() + "";
	let t22;
	let t23;
	let div10;
	let t24;
	let t25_value = /*recovered*/ ctx[4].toLocaleString() + "";
	let t25;

	return {
		c() {
			div12 = element("div");
			div3 = element("div");
			div0 = element("div");
			t0 = text("Cases: ");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");
			t3 = text("Cases Today: ");
			t4 = text(t4_value);
			t5 = space();
			div2 = element("div");
			t6 = text("Cases Per Million: ");
			t7 = text(t7_value);
			t8 = space();
			div7 = element("div");
			div4 = element("div");
			t9 = text("Deaths: ");
			t10 = text(t10_value);
			t11 = space();
			div5 = element("div");
			t12 = text("Deaths Today: ");
			t13 = text(t13_value);
			t14 = space();
			div6 = element("div");
			t15 = text("Deaths Per Million: ");
			t16 = text(t16_value);
			t17 = space();
			div11 = element("div");
			div8 = element("div");
			t18 = text("Active: ");
			t19 = text(t19_value);
			t20 = space();
			div9 = element("div");
			t21 = text("Critical: ");
			t22 = text(t22_value);
			t23 = space();
			div10 = element("div");
			t24 = text("Recovered: ");
			t25 = text(t25_value);
			this.h();
		},
		l(nodes) {
			div12 = claim_element(nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			div3 = claim_element(div12_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Cases: ");
			t1 = claim_text(div0_nodes, t1_value);
			div0_nodes.forEach(detach);
			t2 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t3 = claim_text(div1_nodes, "Cases Today: ");
			t4 = claim_text(div1_nodes, t4_value);
			div1_nodes.forEach(detach);
			t5 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t6 = claim_text(div2_nodes, "Cases Per Million: ");
			t7 = claim_text(div2_nodes, t7_value);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t8 = claim_space(div12_nodes);
			div7 = claim_element(div12_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div4 = claim_element(div7_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t9 = claim_text(div4_nodes, "Deaths: ");
			t10 = claim_text(div4_nodes, t10_value);
			div4_nodes.forEach(detach);
			t11 = claim_space(div7_nodes);
			div5 = claim_element(div7_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			t12 = claim_text(div5_nodes, "Deaths Today: ");
			t13 = claim_text(div5_nodes, t13_value);
			div5_nodes.forEach(detach);
			t14 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			t15 = claim_text(div6_nodes, "Deaths Per Million: ");
			t16 = claim_text(div6_nodes, t16_value);
			div6_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			t17 = claim_space(div12_nodes);
			div11 = claim_element(div12_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div8 = claim_element(div11_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			t18 = claim_text(div8_nodes, "Active: ");
			t19 = claim_text(div8_nodes, t19_value);
			div8_nodes.forEach(detach);
			t20 = claim_space(div11_nodes);
			div9 = claim_element(div11_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			t21 = claim_text(div9_nodes, "Critical: ");
			t22 = claim_text(div9_nodes, t22_value);
			div9_nodes.forEach(detach);
			t23 = claim_space(div11_nodes);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			t24 = claim_text(div10_nodes, "Recovered: ");
			t25 = claim_text(div10_nodes, t25_value);
			div10_nodes.forEach(detach);
			div11_nodes.forEach(detach);
			div12_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "column svelte-br4p2");
			attr(div1, "class", "column svelte-br4p2");
			attr(div2, "class", "column svelte-br4p2");
			attr(div3, "class", "ui stackable three column grid svelte-br4p2");
			attr(div4, "class", "column  svelte-br4p2");
			attr(div5, "class", "column  svelte-br4p2");
			attr(div6, "class", "column svelte-br4p2");
			attr(div7, "class", "ui stackable three column grid svelte-br4p2");
			attr(div8, "class", "column svelte-br4p2");
			attr(div9, "class", "column svelte-br4p2");
			attr(div10, "class", "column svelte-br4p2");
			attr(div11, "class", "ui stackable three column grid svelte-br4p2");
			attr(div12, "class", "ui container");
		},
		m(target, anchor) {
			insert(target, div12, anchor);
			append(div12, div3);
			append(div3, div0);
			append(div0, t0);
			append(div0, t1);
			append(div3, t2);
			append(div3, div1);
			append(div1, t3);
			append(div1, t4);
			append(div3, t5);
			append(div3, div2);
			append(div2, t6);
			append(div2, t7);
			append(div12, t8);
			append(div12, div7);
			append(div7, div4);
			append(div4, t9);
			append(div4, t10);
			append(div7, t11);
			append(div7, div5);
			append(div5, t12);
			append(div5, t13);
			append(div7, t14);
			append(div7, div6);
			append(div6, t15);
			append(div6, t16);
			append(div12, t17);
			append(div12, div11);
			append(div11, div8);
			append(div8, t18);
			append(div8, t19);
			append(div11, t20);
			append(div11, div9);
			append(div9, t21);
			append(div9, t22);
			append(div11, t23);
			append(div11, div10);
			append(div10, t24);
			append(div10, t25);
		},
		p(ctx, [dirty]) {
			if (dirty & /*cases*/ 1 && t1_value !== (t1_value = /*cases*/ ctx[0].toLocaleString() + "")) set_data(t1, t1_value);
			if (dirty & /*todayCases*/ 2 && t4_value !== (t4_value = /*todayCases*/ ctx[1].toLocaleString() + "")) set_data(t4, t4_value);
			if (dirty & /*casesPerOneMillion*/ 4 && t7_value !== (t7_value = /*casesPerOneMillion*/ ctx[2].toLocaleString() + "")) set_data(t7, t7_value);
			if (dirty & /*deaths*/ 64 && t10_value !== (t10_value = /*deaths*/ ctx[6].toLocaleString() + "")) set_data(t10, t10_value);
			if (dirty & /*todayDeaths*/ 256 && t13_value !== (t13_value = /*todayDeaths*/ ctx[8].toLocaleString() + "")) set_data(t13, t13_value);
			if (dirty & /*deathsPerMillion*/ 8 && t16_value !== (t16_value = /*deathsPerMillion*/ ctx[3].toLocaleString() + "")) set_data(t16, t16_value);
			if (dirty & /*active*/ 32 && t19_value !== (t19_value = /*active*/ ctx[5].toLocaleString() + "")) set_data(t19, t19_value);
			if (dirty & /*critical*/ 128 && t22_value !== (t22_value = /*critical*/ ctx[7].toLocaleString() + "")) set_data(t22, t22_value);
			if (dirty & /*recovered*/ 16 && t25_value !== (t25_value = /*recovered*/ ctx[4].toLocaleString() + "")) set_data(t25, t25_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div12);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { cases = 0 } = $$props;
	let { todayCases = 0 } = $$props;
	let { casesPerOneMillion = 0 } = $$props;
	let { deathsPerMillion = 0 } = $$props;
	let { recovered = 0 } = $$props;
	let { active = 0 } = $$props;
	let { deaths = 0 } = $$props;
	let { critical = 0 } = $$props;
	let { todayDeaths = 0 } = $$props;

	$$self.$set = $$props => {
		if ("cases" in $$props) $$invalidate(0, cases = $$props.cases);
		if ("todayCases" in $$props) $$invalidate(1, todayCases = $$props.todayCases);
		if ("casesPerOneMillion" in $$props) $$invalidate(2, casesPerOneMillion = $$props.casesPerOneMillion);
		if ("deathsPerMillion" in $$props) $$invalidate(3, deathsPerMillion = $$props.deathsPerMillion);
		if ("recovered" in $$props) $$invalidate(4, recovered = $$props.recovered);
		if ("active" in $$props) $$invalidate(5, active = $$props.active);
		if ("deaths" in $$props) $$invalidate(6, deaths = $$props.deaths);
		if ("critical" in $$props) $$invalidate(7, critical = $$props.critical);
		if ("todayDeaths" in $$props) $$invalidate(8, todayDeaths = $$props.todayDeaths);
	};

	return [
		cases,
		todayCases,
		casesPerOneMillion,
		deathsPerMillion,
		recovered,
		active,
		deaths,
		critical,
		todayDeaths
	];
}

class CovidInfo extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			cases: 0,
			todayCases: 1,
			casesPerOneMillion: 2,
			deathsPerMillion: 3,
			recovered: 4,
			active: 5,
			deaths: 6,
			critical: 7,
			todayDeaths: 8
		});
	}
}

/* src/routes/[country].svelte generated by Svelte v3.20.1 */

function create_if_block(ctx) {
	let div;
	let h1;
	let t0;
	let t1;
	let updating_sortBy;
	let updating_search;
	let t2;
	let updating_page;
	let current;

	function filter_sortBy_binding(value) {
		/*filter_sortBy_binding*/ ctx[14].call(null, value);
	}

	function filter_search_binding(value) {
		/*filter_search_binding*/ ctx[15].call(null, value);
	}

	let filter_props = {
		geoRegionName: "Province / State",
		selectFields: /*fields*/ ctx[8]
	};

	if (/*sortBy*/ ctx[4] !== void 0) {
		filter_props.sortBy = /*sortBy*/ ctx[4];
	}

	if (/*search*/ ctx[5] !== void 0) {
		filter_props.search = /*search*/ ctx[5];
	}

	const filter = new Filter({ props: filter_props });
	binding_callbacks.push(() => bind(filter, "sortBy", filter_sortBy_binding));
	binding_callbacks.push(() => bind(filter, "search", filter_search_binding));

	function table_page_binding(value) {
		/*table_page_binding*/ ctx[16].call(null, value);
	}

	let table_props = {
		geoRegionName: "Province / State",
		fields: /*fields*/ ctx[8],
		sortBy: /*sortBy*/ ctx[4],
		canNav: false,
		list: /*showProvinces*/ ctx[3]
	};

	if (/*page*/ ctx[6] !== void 0) {
		table_props.page = /*page*/ ctx[6];
	}

	const table = new Table({ props: table_props });
	binding_callbacks.push(() => bind(table, "page", table_page_binding));
	table.$on("location", /*changeLocation*/ ctx[9]);

	return {
		c() {
			div = element("div");
			h1 = element("h1");
			t0 = text("Search By Province / State");
			t1 = space();
			create_component(filter.$$.fragment);
			t2 = space();
			create_component(table.$$.fragment);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Search By Province / State");
			h1_nodes.forEach(detach);
			div_nodes.forEach(detach);
			t1 = claim_space(nodes);
			claim_component(filter.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(table.$$.fragment, nodes);
			this.h();
		},
		h() {
			attr(h1, "class", "svelte-15uwyg3");
			attr(div, "class", "ui container");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h1);
			append(h1, t0);
			insert(target, t1, anchor);
			mount_component(filter, target, anchor);
			insert(target, t2, anchor);
			mount_component(table, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const filter_changes = {};

			if (!updating_sortBy && dirty & /*sortBy*/ 16) {
				updating_sortBy = true;
				filter_changes.sortBy = /*sortBy*/ ctx[4];
				add_flush_callback(() => updating_sortBy = false);
			}

			if (!updating_search && dirty & /*search*/ 32) {
				updating_search = true;
				filter_changes.search = /*search*/ ctx[5];
				add_flush_callback(() => updating_search = false);
			}

			filter.$set(filter_changes);
			const table_changes = {};
			if (dirty & /*sortBy*/ 16) table_changes.sortBy = /*sortBy*/ ctx[4];
			if (dirty & /*showProvinces*/ 8) table_changes.list = /*showProvinces*/ ctx[3];

			if (!updating_page && dirty & /*page*/ 64) {
				updating_page = true;
				table_changes.page = /*page*/ ctx[6];
				add_flush_callback(() => updating_page = false);
			}

			table.$set(table_changes);
		},
		i(local) {
			if (current) return;
			transition_in(filter.$$.fragment, local);
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(filter.$$.fragment, local);
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t1);
			destroy_component(filter, detaching);
			if (detaching) detach(t2);
			destroy_component(table, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let title_value;
	let t0;
	let div3;
	let div2;
	let a;
	let t1;
	let t2;
	let div0;
	let t3;
	let t4;
	let div1;
	let t5_value = _.startCase(/*showCountry*/ ctx[7]) + "";
	let t5;
	let t6;
	let div4;
	let h1;
	let t7;
	let t8_value = _.startCase(/*showCountry*/ ctx[7]) + "";
	let t8;
	let t9;
	let t10;
	let t11;
	let if_block_anchor;
	let current;
	document.title = title_value = "Covid 19 Tracker For " + _.startCase(/*showCountry*/ ctx[7]);
	const covidinfo_spread_levels = [/*countryInfo*/ ctx[1]];
	let covidinfo_props = {};

	for (let i = 0; i < covidinfo_spread_levels.length; i += 1) {
		covidinfo_props = assign(covidinfo_props, covidinfo_spread_levels[i]);
	}

	const covidinfo = new CovidInfo({ props: covidinfo_props });

	const covidchart = new CovidChart({
			props: {
				title: "Covid-19 State For " + _.startCase(/*showCountry*/ ctx[7]),
				historicData: /*historicCountryData*/ ctx[0].timeline
			}
		});

	let if_block = /*provinces*/ ctx[2].length > 0 && create_if_block(ctx);

	return {
		c() {
			t0 = space();
			div3 = element("div");
			div2 = element("div");
			a = element("a");
			t1 = text("Home");
			t2 = space();
			div0 = element("div");
			t3 = text("/");
			t4 = space();
			div1 = element("div");
			t5 = text(t5_value);
			t6 = space();
			div4 = element("div");
			h1 = element("h1");
			t7 = text("Country ");
			t8 = text(t8_value);
			t9 = space();
			create_component(covidinfo.$$.fragment);
			t10 = space();
			create_component(covidchart.$$.fragment);
			t11 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-14u9moo\"]", document.head);
			head_nodes.forEach(detach);
			t0 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			a = claim_element(div2_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, "Home");
			a_nodes.forEach(detach);
			t2 = claim_space(div2_nodes);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t3 = claim_text(div0_nodes, "/");
			div0_nodes.forEach(detach);
			t4 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t5 = claim_text(div1_nodes, t5_value);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t6 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			h1 = claim_element(div4_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t7 = claim_text(h1_nodes, "Country ");
			t8 = claim_text(h1_nodes, t8_value);
			h1_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t9 = claim_space(nodes);
			claim_component(covidinfo.$$.fragment, nodes);
			t10 = claim_space(nodes);
			claim_component(covidchart.$$.fragment, nodes);
			t11 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h() {
			attr(a, "href", "/covid-19-sapper-demo");
			attr(a, "class", "section");
			attr(div0, "class", "divider");
			attr(div1, "class", "active section");
			attr(div2, "class", "ui breadcrumb");
			attr(div3, "class", "ui container");
			attr(h1, "class", "svelte-15uwyg3");
			attr(div4, "class", "ui container");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, a);
			append(a, t1);
			append(div2, t2);
			append(div2, div0);
			append(div0, t3);
			append(div2, t4);
			append(div2, div1);
			append(div1, t5);
			insert(target, t6, anchor);
			insert(target, div4, anchor);
			append(div4, h1);
			append(h1, t7);
			append(h1, t8);
			insert(target, t9, anchor);
			mount_component(covidinfo, target, anchor);
			insert(target, t10, anchor);
			mount_component(covidchart, target, anchor);
			insert(target, t11, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*_, showCountry*/ 128) && title_value !== (title_value = "Covid 19 Tracker For " + _.startCase(/*showCountry*/ ctx[7]))) {
				document.title = title_value;
			}

			if ((!current || dirty & /*showCountry*/ 128) && t5_value !== (t5_value = _.startCase(/*showCountry*/ ctx[7]) + "")) set_data(t5, t5_value);
			if ((!current || dirty & /*showCountry*/ 128) && t8_value !== (t8_value = _.startCase(/*showCountry*/ ctx[7]) + "")) set_data(t8, t8_value);

			const covidinfo_changes = (dirty & /*countryInfo*/ 2)
			? get_spread_update(covidinfo_spread_levels, [get_spread_object(/*countryInfo*/ ctx[1])])
			: {};

			covidinfo.$set(covidinfo_changes);
			const covidchart_changes = {};
			if (dirty & /*showCountry*/ 128) covidchart_changes.title = "Covid-19 State For " + _.startCase(/*showCountry*/ ctx[7]);
			if (dirty & /*historicCountryData*/ 1) covidchart_changes.historicData = /*historicCountryData*/ ctx[0].timeline;
			covidchart.$set(covidchart_changes);

			if (/*provinces*/ ctx[2].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(covidinfo.$$.fragment, local);
			transition_in(covidchart.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(covidinfo.$$.fragment, local);
			transition_out(covidchart.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(div3);
			if (detaching) detach(t6);
			if (detaching) detach(div4);
			if (detaching) detach(t9);
			destroy_component(covidinfo, detaching);
			if (detaching) detach(t10);
			destroy_component(covidchart, detaching);
			if (detaching) detach(t11);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

async function preload(page) {
	try {
		const country = page.params["country"];
		const countryInfo = await getDataForCountry(country);
		const historicCountryData = await getCountryTimeline(country);
		const provinces = await getProvincesForCountry(historicCountryData.country);

		return {
			countryInfo,
			historicCountryData,
			provinces,
			country
		};
	} catch(e) {
		this.error(500, "There was an error in calling the api, please try again in 5 minutes.");
	}

	return { country: page.params["country"] };
}

function instance$1($$self, $$props, $$invalidate) {
	let { country } = $$props;
	let { historicCountryData = {} } = $$props;
	let { countryInfo = {} } = $$props;
	let { provinces = [] } = $$props;
	let pieChart;
	let lineChart;
	let showProvinces = [];
	let sortBy = "none";
	let search = "";
	let page = 0;
	let unsubscribe;
	const fields = ["Cases", "Deaths"];

	async function changeLocation(event) {
		await goto(country + "/" + event.detail);
	}

	function filter_sortBy_binding(value) {
		sortBy = value;
		$$invalidate(4, sortBy);
	}

	function filter_search_binding(value) {
		search = value;
		$$invalidate(5, search);
	}

	function table_page_binding(value) {
		page = value;
		($$invalidate(6, page), $$invalidate(5, search));
	}

	$$self.$set = $$props => {
		if ("country" in $$props) $$invalidate(10, country = $$props.country);
		if ("historicCountryData" in $$props) $$invalidate(0, historicCountryData = $$props.historicCountryData);
		if ("countryInfo" in $$props) $$invalidate(1, countryInfo = $$props.countryInfo);
		if ("provinces" in $$props) $$invalidate(2, provinces = $$props.provinces);
	};

	let showCountry;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*country*/ 1024) {
			 $$invalidate(7, showCountry = country.toLowerCase().includes("korea")
			? "South Korea"
			: country);
		}

		if ($$self.$$.dirty & /*provinces, search*/ 36) {
			 $$invalidate(3, showProvinces = filterByName(provinces, search));
		}

		if ($$self.$$.dirty & /*search*/ 32) {
			 if (search.length > 0) {
				$$invalidate(6, page = 0);
			}
		}
	};

	return [
		historicCountryData,
		countryInfo,
		provinces,
		showProvinces,
		sortBy,
		search,
		page,
		showCountry,
		fields,
		changeLocation,
		country,
		pieChart,
		lineChart,
		unsubscribe,
		filter_sortBy_binding,
		filter_search_binding,
		table_page_binding
	];
}

class U5Bcountryu5D extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			country: 10,
			historicCountryData: 0,
			countryInfo: 1,
			provinces: 2
		});
	}
}

export default U5Bcountryu5D;
export { preload };
