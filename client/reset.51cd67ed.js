import { S as SvelteComponent, i as init, s as safe_not_equal, c as space, b as element, p as text, N as query_selector_all, d as detach, h as claim_space, f as claim_element, g as children, q as claim_text, j as attr, O as set_style, a as insert, k as append, l as listen, n as noop } from './client.2752e8d9.js';
import { d as deleteCacheKeys } from './cache.49e66cc5.js';

/* src/routes/reset.svelte generated by Svelte v3.20.1 */

function create_fragment(ctx) {
	let t0;
	let div2;
	let div1;
	let div0;
	let t1;
	let t2;
	let p0;
	let t3;
	let t4;
	let div3;
	let p1;
	let t5;
	let t6;
	let button;
	let t7;
	let dispose;

	return {
		c() {
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			t1 = text("You just refreshed the data.");
			t2 = space();
			p0 = element("p");
			t3 = text("Please do this sparingly. Thank you!!!");
			t4 = space();
			div3 = element("div");
			p1 = element("p");
			t5 = text("Click this button will refresh the data for this website. When you go to the\n    home page it might take a few seconds to load.");
			t6 = space();
			button = element("button");
			t7 = text("Refresh Data");
			this.h();
		},
		l(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-khqcqk\"]", document.head);
			head_nodes.forEach(detach);
			t0 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { style: true, class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, "You just refreshed the data.");
			div0_nodes.forEach(detach);
			t2 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", {});
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "Please do this sparingly. Thank you!!!");
			p0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t4 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			p1 = claim_element(div3_nodes, "P", {});
			var p1_nodes = children(p1);
			t5 = claim_text(p1_nodes, "Click this button will refresh the data for this website. When you go to the\n    home page it might take a few seconds to load.");
			p1_nodes.forEach(detach);
			t6 = claim_space(div3_nodes);
			button = claim_element(div3_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t7 = claim_text(button_nodes, "Refresh Data");
			button_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},
		h() {
			document.title = "Reset Cache";
			attr(div0, "class", "header");
			attr(div1, "class", "ui success message");
			set_style(div2, "display", /*showSuccess*/ ctx[0] ? "block" : "none");
			attr(div2, "class", "ui container svelte-vhmlr");
			attr(button, "class", "ui red basic button");
			attr(div3, "class", "ui container svelte-vhmlr");
		},
		m(target, anchor, remount) {
			insert(target, t0, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			append(div0, t1);
			append(div1, t2);
			append(div1, p0);
			append(p0, t3);
			insert(target, t4, anchor);
			insert(target, div3, anchor);
			append(div3, p1);
			append(p1, t5);
			append(div3, t6);
			append(div3, button);
			append(button, t7);
			if (remount) dispose();
			dispose = listen(button, "click", /*deleteCache*/ ctx[1]);
		},
		p(ctx, [dirty]) {
			if (dirty & /*showSuccess*/ 1) {
				set_style(div2, "display", /*showSuccess*/ ctx[0] ? "block" : "none");
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(div2);
			if (detaching) detach(t4);
			if (detaching) detach(div3);
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let showSuccess = false;

	function deleteCache() {
		deleteCacheKeys();
		$$invalidate(0, showSuccess = true);
	}

	return [showSuccess, deleteCache];
}

class Reset extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Reset;
